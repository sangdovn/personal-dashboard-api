name: Personal Dashboard API

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install -r src/requirements/requirements-dev.txt

      - name: Run Ruff (Lint)
        run: ruff check .

      - name: Run Black (Format Code)
        run: black --check .

      - name: Run Isort (Sort Imports)
        run: isort --check-only .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install -r src/requirements/requirements-dev.txt

      - name: Test with pytest
        run: pytest

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build --no-cache -t "${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.APP_NAME }}:latest" .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push "${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.APP_NAME }}:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            docker pull "${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.APP_NAME }}:latest"

            # Stop and remove old container and image
            docker stop ${{ vars.APP_NAME }} || echo "No container to stop"
            docker rm ${{ vars.APP_NAME }} || echo "No container to remove"
            docker rmi "${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.APP_NAME }}:latest" || echo "No image to remove"

            # Run new container
            docker run -d --restart always --name ${{ vars.APP_NAME }} -p ${{ vars.HOST_PORT }}:${{ vars.CONTAINER_PORT }} -e ENV=production ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.APP_NAME }}:latest
